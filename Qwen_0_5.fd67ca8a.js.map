{"mappings":"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","sources":["<anon>","src/Qwen_0_5.ts"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire90c9\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire90c9\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n//import { max } from \"@huggingface/transformers\";\n\nvar $iL0Jt = parcelRequire(\"iL0Jt\");\n//to use:\n//Qwen 2.5, 0.5B\n//Qwen 2.5, 1.5B\n//Qwen 2.5, 3B\n//StableLM 2 Zephyr, 1.6B\nfunction $6733970a4b6fc630$var$setLabel(id, text) {\n    const label = document.getElementById(id);\n    if (label == null) throw Error(\"Cannot find label \" + id);\n    label.innerText = text;\n}\nasync function $6733970a4b6fc630$var$main() {\n    const initProgressCallback = (report)=>{\n        $6733970a4b6fc630$var$setLabel(\"init-label\", report.text);\n    };\n    // const model_zephyr = \"stablelm-2-zephyr-1_6b-q4f32_1-MLC\";\n    //const model_qwen1_5 = \"Qwen2.5-1.5B-Instruct-q4f32_1-MLC\";\n    // const model_qwen3 = \"Qwen2.5-3B-Instruct-q4f32_1-MLC\";\n    const model_qwen05 = \"Qwen2.5-0.5B-Instruct-q0f32-MLC\";\n    const appConfig = {\n        model_list: [\n            {\n                model: \"https://huggingface.co/mlc-ai/Qwen2.5-0.5B-Instruct-q0f32-MLC\",\n                model_id: model_qwen05,\n                model_lib: $iL0Jt.modelLibURLPrefix + $iL0Jt.modelVersion + \"/Qwen2-0.5B-Instruct-q0f32-ctx4k_cs1k-webgpu.wasm\",\n                overrides: {\n                    context_window_size: 4096\n                }\n            }\n        ]\n    };\n    // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n    //   model_qwen1_5,\n    //   {\n    //     appConfig: appConfig,\n    //     initProgressCallback: initProgressCallback,\n    //     logLevel: \"INFO\",\n    //   },\n    // );\n    const engine = await $iL0Jt.CreateMLCEngine(model_qwen05, {\n        appConfig: appConfig,\n        initProgressCallback: initProgressCallback,\n        logLevel: \"INFO\"\n    });\n    // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n    //   model_qwen3,\n    //   {\n    //     appConfig: appConfig,\n    //     initProgressCallback: initProgressCallback,\n    //     logLevel: \"INFO\",\n    //   },\n    // );\n    // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n    //   model_zephyr,\n    //   {\n    //     appConfig: appConfig,\n    //     initProgressCallback: initProgressCallback,\n    //     logLevel: \"INFO\",\n    //   },\n    // );\n    async function generate_options(text, inference_engine, element_id, topk, max_output) {\n        const textElement = document.getElementById(element_id);\n        if (textElement) textElement.value = \"Loading...\";\n        else console.error(\"Cannot find textarea with id \" + element_id);\n        const reply = await inference_engine.completions.create({\n            prompt: \"text: \" + text,\n            // below configurations are all optional\n            echo: false,\n            n: 1,\n            max_tokens: max_output,\n            logprobs: true,\n            top_logprobs: topk\n        });\n        // Iterate through the choices array and concatenate the text items\n        let combinedText = \"\";\n        if (reply.choices && reply.choices[0].logprobs && reply.choices[0].logprobs.content && reply.choices[0].logprobs.content[0].top_logprobs) reply.choices[0].logprobs.content[0].top_logprobs.forEach((choice)=>{\n            combinedText += choice.token.trim() + \"\\n\";\n        });\n        else console.error(\"Unexpected reply structure\", reply);\n        textElement.value = combinedText;\n        console.log(reply);\n    }\n    let maxWords = 5;\n    let maxOutput = 1;\n    //handle top-k scrollbar\n    const maxWordsSlider = document.getElementById(\"max_words\");\n    if (maxWordsSlider) maxWordsSlider.addEventListener(\"input\", function() {\n        maxWords = parseInt(this.value, 10);\n        const labelMaxWords = document.getElementById(\"label_max_words\");\n        if (labelMaxWords) labelMaxWords.innerText = `Top k words: ${maxWords}`;\n    });\n    else console.error(\"Cannot find slider with id 'max_words'\");\n    //handle context window scrollbar\n    const contextWindowSlider = document.getElementById(\"context_window\");\n    let contextWindowSize = 100; // Default context window size\n    if (contextWindowSlider) contextWindowSlider.addEventListener(\"input\", function() {\n        contextWindowSize = parseInt(this.value, 10);\n        const labelContextWindow = document.getElementById(\"label_context_window\");\n        if (labelContextWindow) labelContextWindow.innerText = `Context Window (words included in query for inference): ${contextWindowSize}`;\n    });\n    else console.error(\"Cannot find slider with id 'context_window'\");\n    //handle option selection for frequency of inference\n    let selectedOption = \"everyword\";\n    const wordRadio = document.getElementById(\"everyword\");\n    const letterRadio = document.getElementById(\"everyletter\");\n    if (wordRadio && letterRadio) {\n        wordRadio.addEventListener(\"change\", function() {\n            if (this.checked) {\n                selectedOption = this.value;\n                console.log(`Selected option: ${selectedOption}`);\n            }\n        });\n        letterRadio.addEventListener(\"change\", function() {\n            if (this.checked) {\n                selectedOption = this.value;\n                console.log(`Selected option: ${selectedOption}`);\n            }\n        });\n    } else console.error(\"Cannot find radio buttons with ids 'everyword' or 'everyletter'\");\n    //handle score counter\n    let matchCount = 0;\n    const matchCountField = document.getElementById(\"match_count\");\n    const suggestedText = document.getElementById(\"suggested_text\");\n    const inputText = document.getElementById(\"input_text\");\n    if (inputText) inputText.addEventListener(\"input\", function() {\n        let inputTextValue = this.value;\n        const words = inputTextValue.trim().split(/\\s+/);\n        // Check the selected option and call generate_options accordingly\n        if (selectedOption === \"everyword\") {\n            // Call generate_options if the last character is a space\n            //limit query length to context window size\n            if (words.length > contextWindowSize) inputTextValue = words.slice(-contextWindowSize).join(\" \");\n            if (inputTextValue.endsWith(\" \")) {\n                // Check if the last word typed matches any word in the previous suggested text\n                const lastWord = words[words.length - 1];\n                if (suggestedText && suggestedText.value.includes(lastWord)) {\n                    matchCount++;\n                    if (matchCountField) matchCountField.value = matchCount.toString();\n                }\n                //limit query length to context window size\n                if (words.length > contextWindowSize) inputTextValue = words.slice(-contextWindowSize).join(\" \");\n                generate_options(inputTextValue, engine, \"suggested_text\", maxWords, maxOutput);\n            }\n        } else if (selectedOption === \"everyletter\") {\n            // Call generate_options at every new input\n            //limit query length to context window size\n            if (words.length > contextWindowSize) inputTextValue = words.slice(-contextWindowSize).join(\" \");\n            generate_options(inputTextValue, engine, \"suggested_text\", maxWords, maxOutput);\n        }\n    });\n}\n$6733970a4b6fc630$var$main();\n\n\n//# sourceMappingURL=Qwen_0_5.fd67ca8a.js.map\n","//import { max } from \"@huggingface/transformers\";\nimport * as webllm from \"@mlc-ai/web-llm\";\n\n\n//to use:\n//Qwen 2.5, 0.5B\n//Qwen 2.5, 1.5B\n//Qwen 2.5, 3B\n//StableLM 2 Zephyr, 1.6B\n\nfunction setLabel(id: string, text: string) {\n  const label = document.getElementById(id);\n  if (label == null) {\n    throw Error(\"Cannot find label \" + id);\n  }\n  label.innerText = text;\n}\n\nasync function main() {\n  const initProgressCallback = (report: webllm.InitProgressReport) => {\n    setLabel(\"init-label\", report.text);\n  };\n\n\n  // const model_zephyr = \"stablelm-2-zephyr-1_6b-q4f32_1-MLC\";\n  //const model_qwen1_5 = \"Qwen2.5-1.5B-Instruct-q4f32_1-MLC\";\n  // const model_qwen3 = \"Qwen2.5-3B-Instruct-q4f32_1-MLC\";\n  const model_qwen05 = \"Qwen2.5-0.5B-Instruct-q0f32-MLC\";\n\n\n  const appConfig: webllm.AppConfig = {\n    model_list: [\n\n\n      {\n        model: \"https://huggingface.co/mlc-ai/Qwen2.5-0.5B-Instruct-q0f32-MLC\",\n        model_id: model_qwen05,\n        model_lib:\n          webllm.modelLibURLPrefix +\n          webllm.modelVersion +\n          \"/Qwen2-0.5B-Instruct-q0f32-ctx4k_cs1k-webgpu.wasm\",\n        overrides: {\n          context_window_size: 4096,\n        },\n      },\n      // {\n      //   model: \"https://huggingface.co/mlc-ai/Qwen2.5-3B-Instruct-q4f32_1-MLC\",\n      //   model_id: model_qwen3,\n      //   model_lib:\n      //     webllm.modelLibURLPrefix +\n      //     webllm.modelVersion +\n      //     \"/Qwen2.5-3B-Instruct-q4f32_1-ctx4k_cs1k-webgpu.wasm\",\n      //   overrides: {\n      //     context_window_size: 4096,\n      //   },\n      // },\n      // {\n      //   model: \"https://huggingface.co/mlc-ai/Qwen2.5-1.5B-Instruct-q4f32_1-MLC\",\n      //   model_id: model_qwen1_5,\n      //   model_lib:\n      //     webllm.modelLibURLPrefix +\n      //     webllm.modelVersion +\n      //     \"/Qwen2-1.5B-Instruct-q4f32_1-ctx4k_cs1k-webgpu.wasm\",\n      //   overrides: {\n      //     context_window_size: 4096,\n      //   },\n      // },\n      // {\n      //   model: \"https://huggingface.co/mlc-ai/stablelm-2-zephyr-1_6b-q4f32_1-MLC\", // a base model\n      //   model_id: model_zephyr,\n      //   model_lib:\n      //     webllm.modelLibURLPrefix +\n      //     webllm.modelVersion +\n      //     \"/stablelm-2-zephyr-1_6b-q4f32_1-ctx4k_cs1k-webgpu.wasm\",\n      //   overrides: {\n      //     context_window_size: 4096,\n      //   },\n      // },\n\n    ],\n  };\n\n  // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n  //   model_qwen1_5,\n  //   {\n  //     appConfig: appConfig,\n  //     initProgressCallback: initProgressCallback,\n  //     logLevel: \"INFO\",\n  //   },\n  // );\n\n\n  const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n    model_qwen05,\n    {\n      appConfig: appConfig,\n      initProgressCallback: initProgressCallback,\n      logLevel: \"INFO\",\n    },\n  );\n  // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n  //   model_qwen3,\n  //   {\n  //     appConfig: appConfig,\n  //     initProgressCallback: initProgressCallback,\n  //     logLevel: \"INFO\",\n  //   },\n  // );\n\n  // const engine: webllm.MLCEngineInterface = await webllm.CreateMLCEngine(\n  //   model_zephyr,\n  //   {\n  //     appConfig: appConfig,\n  //     initProgressCallback: initProgressCallback,\n  //     logLevel: \"INFO\",\n  //   },\n  // );\n\n  \n\n  async function generate_options(text: string, inference_engine: webllm.MLCEngineInterface, element_id: string, topk: number, max_output: number) {\n\n    const textElement = document.getElementById(element_id) as HTMLTextAreaElement;\n    if (textElement) {\n      textElement.value = \"Loading...\";\n    } else {\n      console.error(\"Cannot find textarea with id \" + element_id);\n    }\n\n\n    const reply = await inference_engine.completions.create({\n      prompt: \"text: \" + text,\n      // below configurations are all optional\n      echo: false,\n      n: 1,\n      max_tokens: max_output,\n      logprobs: true,\n      top_logprobs: topk,\n      //best_of: 5, // option not yet supported\n    });\n\n    // Iterate through the choices array and concatenate the text items\n    let combinedText = \"\";\n    if (reply.choices && reply.choices[0].logprobs && reply.choices[0].logprobs.content && reply.choices[0].logprobs.content[0].top_logprobs) {\n      reply.choices[0].logprobs.content[0].top_logprobs.forEach(choice => {\n        combinedText += choice.token.trim() + \"\\n\";\n      });\n    } else {\n      console.error(\"Unexpected reply structure\", reply);\n    }\n\n    textElement.value = combinedText;\n\n    console.log(reply);\n  }\n\n  let maxWords = 5;\n  let maxOutput = 1;\n\n  //handle top-k scrollbar\n  const maxWordsSlider = document.getElementById('max_words') as HTMLInputElement;\n  \n  if (maxWordsSlider) {\n    maxWordsSlider.addEventListener('input', function() {\n      maxWords = parseInt(this.value, 10);\n      const labelMaxWords = document.getElementById('label_max_words');\n      if (labelMaxWords) {\n        labelMaxWords.innerText = `Top k words: ${maxWords}`;\n      }\n    });\n  } else {\n    console.error(\"Cannot find slider with id 'max_words'\");\n  }\n\n  //handle context window scrollbar\n  const contextWindowSlider = document.getElementById('context_window') as HTMLInputElement;\n  let contextWindowSize = 100; // Default context window size\n\n  if (contextWindowSlider) {\n    contextWindowSlider.addEventListener('input', function() {\n      contextWindowSize = parseInt(this.value, 10);\n      const labelContextWindow = document.getElementById('label_context_window');\n      if (labelContextWindow) {\n        labelContextWindow.innerText = `Context Window (words included in query for inference): ${contextWindowSize}`;\n      }\n    });\n  } else {\n    console.error(\"Cannot find slider with id 'context_window'\");\n  }\n  \n\n\n  //handle option selection for frequency of inference\n  let selectedOption = 'everyword';\n\n  const wordRadio = document.getElementById('everyword') as HTMLInputElement;\n  const letterRadio = document.getElementById('everyletter') as HTMLInputElement;\n  \n  if (wordRadio && letterRadio) {\n    wordRadio.addEventListener('change', function() {\n      if (this.checked) {\n        selectedOption = this.value;\n        console.log(`Selected option: ${selectedOption}`);\n      }\n    });\n  \n    letterRadio.addEventListener('change', function() {\n      if (this.checked) {\n        selectedOption = this.value;\n        console.log(`Selected option: ${selectedOption}`);\n      }\n    });\n  } else {\n    console.error(\"Cannot find radio buttons with ids 'everyword' or 'everyletter'\");\n  }\n\n\n  //handle score counter\n  let matchCount = 0;\n  const matchCountField = document.getElementById('match_count') as HTMLInputElement;\n  const suggestedText = document.getElementById('suggested_text') as HTMLTextAreaElement;\n\n  const inputText = document.getElementById('input_text') as HTMLTextAreaElement;\n  if (inputText) {\n    inputText.addEventListener('input', function() {\n      let inputTextValue = this.value;\n      const words = inputTextValue.trim().split(/\\s+/);\n      // Check the selected option and call generate_options accordingly\n      if (selectedOption === 'everyword') {\n        // Call generate_options if the last character is a space\n\n        //limit query length to context window size\n        if (words.length > contextWindowSize) {\n          inputTextValue = words.slice(-contextWindowSize).join(' ');\n        }\n\n        if (inputTextValue.endsWith(' ')) {\n          // Check if the last word typed matches any word in the previous suggested text\n          const lastWord = words[words.length - 1];\n          if (suggestedText && suggestedText.value.includes(lastWord)) {\n            matchCount++;\n            if (matchCountField) {\n              matchCountField.value = matchCount.toString();\n            }\n          }\n\n          //limit query length to context window size\n          if (words.length > contextWindowSize) {\n            inputTextValue = words.slice(-contextWindowSize).join(' ');\n          }\n          generate_options(inputTextValue, engine, 'suggested_text', maxWords, maxOutput);\n    \n        \n      }\n      } else if (selectedOption === 'everyletter') {\n        // Call generate_options at every new input\n\n        //limit query length to context window size\n        if (words.length > contextWindowSize) {\n          inputTextValue = words.slice(-contextWindowSize).join(' ');\n        }\n        generate_options(inputTextValue, engine, 'suggested_text', maxWords, maxOutput);\n      }\n\n      \n    });\n  }\n\n\n}\n\n\n\n\n\nmain();\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$iL0Jt","$6733970a4b6fc630$var$main","model_qwen05","appConfig","model_list","model","model_id","model_lib","modelLibURLPrefix","modelVersion","overrides","context_window_size","engine","CreateMLCEngine","initProgressCallback","report","$6733970a4b6fc630$var$setLabel","text","label","document","getElementById","innerText","logLevel","generate_options","inference_engine","element_id","topk","max_output","textElement","value","console","error","reply","completions","create","prompt","echo","n","max_tokens","logprobs","top_logprobs","combinedText","choices","content","forEach","choice","token","trim","log","maxWords","maxWordsSlider","addEventListener","parseInt","labelMaxWords","contextWindowSlider","contextWindowSize","labelContextWindow","selectedOption","wordRadio","letterRadio","checked","matchCount","matchCountField","suggestedText","inputText","inputTextValue","words","split","length","slice","join","endsWith","lastWord","includes","toString"],"version":3,"file":"Qwen_0_5.fd67ca8a.js.map"}